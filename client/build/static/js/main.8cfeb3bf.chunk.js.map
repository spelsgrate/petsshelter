{"version":3,"sources":["components/PetList.js","views/home.js","components/PetForm.js","views/new.js","components/EditPet.js","views/edit.js","views/details.js","App.js","serviceWorker.js","index.js"],"names":["PetList","props","pets","map","pet","idx","key","name","type","to","_id","useState","setPets","loaded","setLoaded","useEffect","axios","get","then","res","data","catch","err","console","log","setName","setType","skill0","setSkill0","skill1","setSkill1","skill2","setSkill2","errors","setErrors","description","setDescription","onSubmit","e","preventDefault","post","skills","navigate","onChange","target","value","message","PetForm","EditPet","put","setPet","id","a_pet","skill","class","onClick","delete","App","className","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.8cfeb3bf.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from '@reach/router';\r\nconst PetList = props => {\r\n    return(\r\n        <table>\r\n            <tr>\r\n                <th>Name </th>\r\n                <th>Type </th>\r\n                <th>Actions </th>\r\n            </tr>\r\n            {props.pets.map((pet, idx) => {\r\n                return <tr key={idx}>\r\n                    <td>{pet.name}</td>\r\n                    <td>{pet.type}</td>\r\n                    <td>\r\n                        <Link to={\"/pets/\" + pet._id}> details </Link>\r\n                        |\r\n                        <Link to={\"/pets/\" + pet._id + \"/edit\"}> edit </Link>\r\n                    </td>\r\n                </tr>\r\n            })}\r\n        </table>\r\n    );\r\n}\r\nexport default PetList;","import React, {useState, useEffect} from 'react';\r\nimport axios from 'axios';\r\nimport { Link } from '@reach/router';\r\n\r\nimport PetList from '../components/PetList';\r\nexport default props => {\r\n\tconst [pets, setPets] = useState([]);\r\n\tconst [loaded, setLoaded] = useState(false);    \r\n\tuseEffect(()=>{\r\n\t\taxios.get('http://localhost:8000/api/getAllPets')\r\n\t\t\t.then(res=>{\r\n\t\t\t\tsetPets(res.data);\r\n\t\t\t\tsetLoaded(true);\r\n\t\t\t})\r\n\t\t\t.catch(err => console.log(\"Axios GET error:\", err));\r\n\t},[])\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h1>Pet Shelter</h1>\r\n\t\t\t<Link to='/pets/new'> add a pet to the shelter </Link>\r\n\t\t\t<p> These pets are looking for a good home</p>\r\n\t\t\t{loaded && <PetList pets={pets}/>}\r\n\t\t</div>\r\n\t)\r\n}","import React, { useState } from 'react'\r\nimport axios from 'axios';\r\nimport { navigate } from '@reach/router';\r\n\r\nexport default () => {\r\n    //keep track of what is being typed via useState hook\r\n    const [name, setName] = useState(\"\"); \r\n    const [type, setType] = useState(\"\");\r\n    const [skill0, setSkill0] = useState(\"\");\r\n    const [skill1, setSkill1] = useState(\"\");\r\n    const [skill2, setSkill2] = useState(\"\");\r\n    const [errors, setErrors] = useState({});\r\n    // const [likes, setLikes] = useState(\"\");\r\n    const [description, setDescription] = useState(\"\");\r\n    //handler when the form is submitted\r\n    const onSubmitHandler = e => {\r\n        //prevent default behavior of the submit\r\n        e.preventDefault();\r\n        //make a post request to create a new person\r\n        axios.post('http://localhost:8000/api/createPet', {\r\n            name: name,\r\n            type: type,\r\n            skills: [skill0, skill1, skill2],\r\n            // likes,\r\n            description: description,\r\n        })\r\n            .then(\r\n                res => {\r\n                    console.log(res.data);\r\n                    if(res.data.errors){\r\n                        setErrors(res.data.errors);\r\n                    } else {\r\n                        navigate(\"/\");\r\n                    }\r\n                }\r\n            )\r\n            .catch(err=>console.log(err))\r\n    }\r\n    //onChange to update firstName and lastName\r\n    return (\r\n        <form onSubmit={onSubmitHandler}>\r\n            <p>\r\n                <label>Name</label><br/>\r\n                <input type=\"text\" onChange = {(e)=>setName(e.target.value)}/>\r\n                <p>{ errors.name ? errors.name.message : \"\"  }  </p>\r\n            </p>\r\n            <p>\r\n                <label>Type</label><br/>\r\n                <input type=\"text\" onChange = {(e)=>setType(e.target.value)}/>\r\n                <p>{ errors.type ? errors.type.message : \"\"  }  </p>\r\n            </p>\r\n            <p>\r\n                <label>Skill 1</label><br/>\r\n                <input type=\"text\" onChange = {(e)=>setSkill0(e.target.value)}/>\r\n            </p>\r\n            <p>\r\n                <label>Skill 2</label><br/>\r\n                <input type=\"text\" onChange = {(e)=>setSkill1(e.target.value)}/>\r\n            </p>\r\n            <p>\r\n                <label>Skill 3</label><br/>\r\n                <input type=\"text\" onChange = {(e)=>setSkill2(e.target.value)}/>\r\n            </p>\r\n            <p>\r\n                <label>Description</label><br/>\r\n                <input type=\"textArea\" onChange = {(e)=>setDescription(e.target.value)}/>\r\n                <p>{ errors.description ? errors.description.message : \"\"  }  </p>\r\n            </p>\r\n            <input type=\"submit\"/>\r\n        </form>\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport PetForm from '../components/PetForm';\r\nexport default () => {\r\n    return (\r\n        <div>\r\n           <PetForm />\r\n        </div>\r\n    )\r\n}","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { navigate } from '@reach/router';\r\n\r\nconst EditPet = props => {\r\n\t//keep track of what is being typed via useState hook\r\n\tconst [name, setName] = useState(props.pet.name); \r\n\tconst [type, setType] = useState(props.pet.type);\r\n\tconst [skill0, setSkill0] = useState(props.pet.skills[0]);\r\n\tconst [skill1, setSkill1] = useState(props.pet.skills[1]);\r\n\tconst [skill2, setSkill2] = useState(props.pet.skills[2]);\r\n\tconst [description, setDescription] = useState(props.pet.description);\r\n\t//handler when the form is submitted\r\n\tconst onSubmitHandler = e => {\r\n\t\t//prevent default behavior of the submit\r\n\t\te.preventDefault();\r\n\t\taxios.put(\"http://localhost:8000/api/updatePet/\" + props.pet._id, {\r\n\t\t\tname: name,\r\n\t\t\ttype: type,\r\n\t\t\tskills: [skill0, skill1, skill2],\r\n\t\t\tdescription: description,\r\n\t\t})\r\n\t\t\t.then(\r\n\t\t\t\tnavigate(\"/\")\r\n\t\t\t)\r\n\t\t\t.catch(err=>console.log(err))\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<form onSubmit={onSubmitHandler}>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t<label>Name</label><br/>\r\n\t\t\t\t\t<input type=\"text\" value={name} onChange={(e)=>setName(e.target.value)}/>\r\n\t\t\t\t</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t<label>Type</label><br/>\r\n\t\t\t\t\t<input type=\"text\" value={type}  onChange={(e)=>setType(e.target.value)}/>\r\n\t\t\t\t</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t<label>Skill 1</label><br/>\r\n\t\t\t\t\t<input type=\"text\" value={skill0} onChange={(e)=>setSkill0(e.target.value)}/>\r\n\t\t\t\t</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t<label>Skill 2</label><br/>\r\n\t\t\t\t\t<input type=\"text\" value={skill1} onChange={(e)=>setSkill1(e.target.value)}/>\r\n\t\t\t\t</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t<label>Skill 3</label><br/>\r\n\t\t\t\t\t<input type=\"text\" value={skill2} onChange={(e)=>setSkill2(e.target.value)}/>\r\n\t\t\t\t</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t<label>Description</label><br/>\r\n\t\t\t\t\t<input type=\"textArea\" value={description} onChange={(e)=>setDescription(e.target.value)}/>\r\n\t\t\t\t</p>\r\n\t\t\t\t<input type=\"submit\"/>\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t)\r\n}\r\nexport default EditPet;","import React, { useEffect, useState } from 'react'\r\nimport axios from 'axios';\r\nimport EditPet from '../components/EditPet';\r\nimport { redirectTo, Redirect } from '@reach/router';\r\nexport default props => {\r\n    const [pet, setPet] = useState([]);\r\n    const [loaded, setLoaded] = useState(false);\r\n\tuseEffect(() => {\r\n\t\taxios.get(\"http://localhost:8000/api/getPet/\" + props.id)\r\n\t\t\t.then(res => {\r\n\t\t\t\tsetPet(res.data);\r\n\t\t\t\tsetLoaded(true);\r\n\t\t\t})\r\n\t\t\t.catch(err => console.log(err));\r\n\t\t}, []);\r\n\r\n    return (\r\n        <div>\r\n           {/* <EditPet />\r\n           <hr/> */}\r\n           {loaded && <EditPet pet={pet} />}\r\n           {/* {<Redirect to=\"/\" />} */}\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from 'react'\r\nimport axios from 'axios';\r\nimport { navigate } from '@reach/router';\r\nexport default props => {\r\n\tconst [a_pet, setPet] = useState({skills:[]})\r\n\tuseEffect(() => {\r\n\t\taxios.get(\"http://localhost:8000/api/getPet/\" + props.id)\r\n\t\t\t.then(res => setPet({\r\n\t\t\t\t...res.data\r\n\t\t\t}))\r\n\t\t}, []);\r\n\tconst remove = () => {\r\n\t\taxios.delete(\"http://localhost:8000/api/deletePet/\" + a_pet._id, {\r\n\t\t})\r\n\t\t.then(res => {\r\n\t\t\tnavigate(\"/\")\r\n\t\t}).catch(err => console.log(err));\r\n\t}\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<div>\r\n\r\n\t\t\t<h1>Pet Shelter</h1>\r\n\t\t\t<p>Details about: {a_pet.name}</p>\r\n\r\n\t\t\t\t\t<p>Pet Type: <i>{a_pet.type}</i></p>\r\n\t\t\t\t\t<p>Description: <i>{a_pet.description}</i></p>\r\n\r\n\t\t\t\t\t<p>Skills: {a_pet.skills.map((skill, idx) => {\r\n\t\t\t\t\t\treturn <span class={\"skill\"}>{skill}</span>\r\n\t\t\t\t\t})}</p>\r\n\t\t</div>\r\n\t\t<div>          \r\n\t\t\t<button onClick={ e => remove(a_pet._id) }>\r\n\t\t\t\tAdopt Pet\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}","import React from 'react';\nimport Home from './views/home';\nimport New from './views/new';\nimport Edit from './views/edit';\nimport Details from './views/details'\n\nimport { Router } from '@reach/router';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Home path=\"/\" />\n        <New path=\"/pets/new\" />\n        <Edit path=\"/pets/:id/edit\" />\n        <Details path=\"/pets/:id\" />\n      </Router>\n    </div>\n  );\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}